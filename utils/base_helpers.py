"""
基础方法以及定义
"""
import os
from loguru import logger
from fake_headers import Headers
import yaml
import csv

# 输出日志
logger.add("/tmp/wanted_spider.log", rotation="500 MB")


def create_or_get_directory(directory_path):
    """若目录不存在则创建"""
    if not os.path.exists(directory_path):
        os.makedirs(directory_path, exist_ok=True)
    return directory_path


def generate_header(browser='chrome', ops='win', random_args=False, **kwargs):
    """生成随机请求头"""
    header = Headers(
        browser=browser,  # str, chrome/firefox/opera. User Agent browser. Default: random
        os=ops,  # str, win/mac/lin. OS of User Agent. Default: random
        headers=random_args  # bool, True/False. Generate random headers or no. Default: False
    )
    headers = header.generate()
    for key, value in kwargs.items():
        headers[key] = value
    return headers


def yaml_configure_parser(config_path='configure.yml', key=None):
    # 获取yaml配置
    with open(config_path, 'r') as stream:
        try:
            configure_data = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)
            configure_data = {}

    if key:
        return configure_data.get(key, None)
    else:
        return configure_data


def read_job_files(file_path):
    saved_jobs = []
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                saved_jobs.append(row)
    return saved_jobs


def add_city_to_job_files(file_path):
    saved_jobs = read_job_files(file_path)
    for saved_job in saved_jobs:
        address = saved_job.get('address', None)
        if address:
            city = address.split('-')[0]
        else:
            city = ''
        saved_job['city'] = city
    saved_file_path = '/home/alan/projects/backend/lagou_spiders/lagou_data/java.csv'
    for data in saved_jobs:
        if os.path.exists(saved_file_path):
            with open(saved_file_path, 'a') as f:
                dict_writer = csv.DictWriter(f, data.keys())
                dict_writer.writerow(data)
            logger.info(f'保存数据至:{saved_file_path}')
        else:
            with open(saved_file_path, 'w') as f:
                dict_writer = csv.DictWriter(f, data.keys())
                dict_writer.writeheader()
                dict_writer.writerow(data)
            logger.info(f'保存数据至:{saved_file_path}')


# 默认常用城市
COMMON_CITIES = ['全国', '北京', '上海', '深圳', '广州', '杭州', '成都', '南京', '武汉', '西安', '厦门', '长沙', '苏州', '天津']

# 默认所有城市
ALL_CITIES = ['安庆', '安阳', '鞍山', '安顺', '安康', '阿克苏', '阿坝藏族羌族自治州', '阿拉善盟', '北京', '保定', '蚌埠',
              '滨州', '包头', '宝鸡', '北海', '毕节', '亳州', '巴中', '百色', '本溪', '巴音郭楞', '巴彦淖尔', '保山',
              '白城', '白银', '博尔塔拉', '白山', '成都', '长沙', '重庆', '长春', '常州', '沧州', '常德', '郴州', '赤峰',
              '潮州', '滁州', '承德', '朝阳', '池州', '楚雄', '昌吉', '崇左', '东莞', '大连', '德州', '德阳', '东营', '大庆',
              '大同', '达州', '大理', '丹东', '德宏', '定西', '迪庆', '儋州', '鄂州', '恩施', '鄂尔多斯', '佛山',
              '福州', '阜阳', '抚州', '抚顺', '阜新', '防城港', '广州', '贵阳', '桂林', '赣州', '贵港', '广元', '广安',
              '杭州', '合肥', '惠州', '哈尔滨', '海口', '呼和浩特', '邯郸', '湖州', '菏泽', '淮安', '衡阳', '海外', '衡水',
              '河源', '黄石', '黄冈', '怀化', '淮南', '葫芦岛', '红河', '汉中', '黄山', '鹤壁', '淮北', '贺州', '呼伦贝尔',
              '海东', '河池', '鹤岗', '和田', '哈密', '济南', '金华', '嘉兴', '江门', '济宁', '揭阳', '晋中', '焦作', '荆州',
              '九江', '锦州', '吉林', '景德镇', '吉安', '晋城', '荆门', '佳木斯', '酒泉', '济源', '金昌', '鸡西', '昆明',
              '开封', '喀什', '克拉玛依', '廊坊', '兰州', '临沂', '洛阳', '聊城', '柳州', '六安', '连云港', '拉萨', '吕梁',
              '龙岩', '丽水', '临汾', '乐山', '泸州', '漯河', '六盘水', '辽阳', '凉山彝族自治州', '丽江', '莱芜', '辽源',
              '娄底', '陇南', '来宾', '林芝', '绵阳', '马鞍山', '茂名', '眉山', '梅州', '牡丹江', '南京', '宁波', '南昌',
              '南宁', '南通', '南阳', '南充', '内江', '宁德', '南平', '莆田', '濮阳', '平顶山', '萍乡', '盘锦', '攀枝花',
              '普洱', '平凉', '青岛', '泉州', '清远', '秦皇岛', '衢州', '曲靖', '齐齐哈尔', '黔西南', '黔东南', '黔南',
              '钦州', '庆阳', '七台河', '日照', '深圳', '上海', '苏州', '沈阳', '石家庄', '绍兴', '汕头', '宿迁', '商丘',
              '上饶', '三亚', '宿州', '韶关', '遂宁', '十堰', '邵阳', '三门峡', '汕尾', '三明', '随州', '绥化', '三沙',
              '商洛', '四平', '石嘴山', '朔州', '松原', '石河子', '天津', '太原', '唐山', '台州', '泰安', '泰州', '通辽',
              '天水', '铜仁', '铜陵', '铜川', '台湾', '铁岭', '天门', '通化', '吐鲁番', '武汉', '无锡', '温州', '潍坊',
              '乌鲁木齐', '芜湖', '威海', '渭南', '梧州', '乌海', '乌兰察布', '武威', '吴忠', '文山', '西安', '厦门', '徐州',
              '咸阳', '新乡', '西宁', '许昌', '襄阳', '邢台', '孝感', '湘潭', '信阳', '咸宁', '宣城', '忻州', '西双版纳', '新余',
              '香港', '湘西土家族苗族自治州', '兴安盟', '锡林郭勒盟', '烟台', '银川', '扬州', '盐城', '宜昌', '岳阳', '运城',
              '宜春', '益阳', '阳江', '玉溪', '榆林', '营口', '宜宾', '玉林', '云浮', '永州', '延边', '延安', '伊犁', '雅安',
              '鹰潭', '阳泉', '郑州', '珠海', '中山', '淄博', '株洲', '肇庆', '湛江', '遵义', '驻马店', '漳州', '周口',
              '镇江', '长治', '张家口', '枣庄', '资阳', '舟山', '张家界', '昭通', '自贡', '张掖', '中卫']

# 默认分类
CATEGORIES = ['Java', 'C++', 'PHP', '数据挖掘', '搜索算法', '精准推荐', 'C', 'C#', '全栈工程师', '.NET', 'Hadoop',
              'Python', 'Delphi', 'VB', 'Perl', 'Ruby', 'Node.js', 'Go', 'ASP', 'Shell', '区块链', '后端开发其它',
              'HTML5', 'Android', 'iOS', 'WP', '移动开发其它', 'web前端', 'Flash', 'html5', 'JavaScript', 'U3D',
              'COCOS2D-X', '前端开发其它', '深度学习', '机器学习', '图像处理', '图像识别', '语音识别', '机器视觉',
              '算法工程师', '自然语言处理', '测试工程师', '自动化测试', '功能测试', '性能测试', '测试开发', '游戏测试',
              '白盒测试', '灰盒测试', '黑盒测试', '手机测试', '硬件测试', '测试经理', '测试其它', '运维工程师',
              '运维开发工程师', '网络工程师', '系统工程师', 'IT支持', 'IDC', 'CDN', 'F5', '系统管理员', '病毒分析',
              'WEB安全', '网络安全', '系统安全', '运维经理', '运维其它', 'MySQL', 'SQLServer', 'Oracle', 'DB2',
              'MongoDB', 'ETL', 'Hive', '数据仓库', 'DBA其它', '技术经理', '技术总监', '架构师', 'CTO', '运维总监',
              '技术合伙人', '项目总监', '测试总监', '安全专家', '高端技术职位其它', '项目经理', '项目助理', '硬件', '嵌入式',
              '自动化', '单片机', '电路设计', '驱动开发', '系统集成', 'FPGA开发', 'DSP开发', 'ARM开发', 'PCB工艺', '模具设计',
              '热传导', '材料工程师', '精益工程师', '射频工程师', '硬件开发其它', '实施工程师', '售前工程师', '售后工程师',
              'BI工程师', '企业软件其它', '产品经理', '网页产品经理', '移动产品经理', '产品助理', '数据产品经理', '电商产品经理',
              '游戏策划', '产品实习生', '网页产品设计师', '无线产品设计师', '产品部经理', '产品总监', '游戏制作人', '视觉设计师',
              '网页设计师', 'Flash设计师', 'APP设计师', 'UI设计师', '平面设计师', '美术设计师（2D/3D）', '广告设计师',
              '多媒体设计师', '原画师', '游戏特效', '游戏界面设计师', '游戏场景', '游戏角色', '游戏动作', '交互设计师',
              '无线交互设计师', '网页交互设计师', '硬件交互设计师', '数据分析师', '用户研究员', '游戏数值策划', '设计经理/主管',
              '设计总监', '视觉设计经理/主管', '视觉设计总监', '交互设计经理/主管', '交互设计总监', '用户研究经理/主管',
              '用户研究总监', '用户运营', '产品运营', '数据运营', '内容运营', '活动运营', '商家运营', '品类运营', '游戏运营',
              '网络推广', '运营专员', '网店运营', '新媒体运营', '海外运营', '运营经理', '副主编', '内容编辑', '文案策划',
              '记者', '售前咨询', '售后客服', '淘宝客服', '客服经理', '主编', '运营总监', 'COO', '客服总监', '市场营销',
              '市场策划', '市场顾问', '商务渠道', '商业数据分析', '活动策划', '网络营销', '海外市场', '商务专员', '政府关系',
              '品牌公关', '广告协调', '媒介投放', '媒介合作', '媒介顾问', '广告创意', '广告制作', '广告文案', '广告投放',
              '广告定价', '广告专员', '品牌合作', '品牌策划', '品牌专员', '美术指导', '市场推广', '渠道推广', 'SEO', 'SEM',
              '策划经理', '媒介经理', '市场总监', '公关总监', '媒介总监', '创意总监', '销售专员', '销售顾问', '销售经理',
              '客户代表', '大客户代表', '客户经理', '商务拓展', '渠道销售', '代理商销售', '电话销售', '广告销售', '信用卡销售',
              '保险销售', '销售工程师', '商务渠道', '其他销售', '销售总监', '商务总监', '区域总监', '城市经理', '团队经理',
              '销售VP', '商务主管', '其他销售管理职位', '人力资源', '招聘', 'HRBP', '人事/HR', '培训经理', '薪资福利经理',
              '绩效考核经理', '员工关系', '助理', '前台', '行政', '总助', '文秘', '会计', '出纳', '财务', '结算', '税务',
              '审计', '风控', '法务', '律师', '专利', '行政总监/经理', '财务总监/经理', 'HRD/HRM', 'CFO', 'CEO', 'H5游戏开发',
              '小游戏开发', '游戏后端开发', 'C++游戏开发', 'FLASH', 'COCOS2D-X', 'U3D', '游戏测试', '游戏制作人',
              '游戏产品经理', '游戏项目经理', '游戏策划', '剧情设计', '游戏文案', '游戏动画', '游戏原画', '游戏界面',
              '游戏场景', '游戏角色', '游戏动作', '游戏动效', '游戏美工', '游戏运营', '游戏编辑', '游戏推广', '手游推广',
              '页游推广', '游戏主播', '游戏陪练', '游戏体验', '电竞主持', '电竞讲师']

AREA_ECHARTS_JS = """
$(function () {
    map();
    function map() {
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('%s'));
var data = %s;
var geoCoordMap = {
    '海门':[121.15,31.89],
    '鄂尔多斯':[109.781327,39.608266],
    '招远':[120.38,37.35],
    '舟山':[122.207216,29.985295],
    '齐齐哈尔':[123.97,47.33],
    '盐城':[120.13,33.38],
    '赤峰':[118.87,42.28],
    '青岛':[120.33,36.07],
    '乳山':[121.52,36.89],
    '金昌':[102.188043,38.520089],
    '泉州':[118.58,24.93],
    '莱西':[120.53,36.86],
    '日照':[119.46,35.42],
    '胶南':[119.97,35.88],
    '南通':[121.05,32.08],
    '拉萨':[91.11,29.97],
    '云浮':[112.02,22.93],
    '梅州':[116.1,24.55],
    '文登':[122.05,37.2],
    '上海':[121.48,31.22],
    '攀枝花':[101.718637,26.582347],
    '威海':[122.1,37.5],
    '承德':[117.93,40.97],
    '厦门':[118.1,24.46],
    '汕尾':[115.375279,22.786211],
    '潮州':[116.63,23.68],
    '丹东':[124.37,40.13],
    '太仓':[121.1,31.45],
    '曲靖':[103.79,25.51],
    '烟台':[121.39,37.52],
    '福州':[119.3,26.08],
    '瓦房店':[121.979603,39.627114],
    '即墨':[120.45,36.38],
    '抚顺':[123.97,41.97],
    '玉溪':[102.52,24.35],
    '张家口':[114.87,40.82],
    '阳泉':[113.57,37.85],
    '莱州':[119.942327,37.177017],
    '湖州':[120.1,30.86],
    '汕头':[116.69,23.39],
    '昆山':[120.95,31.39],
    '宁波':[121.56,29.86],
    '湛江':[110.359377,21.270708],
    '揭阳':[116.35,23.55],
    '荣成':[122.41,37.16],
    '连云港':[119.16,34.59],
    '葫芦岛':[120.836932,40.711052],
    '常熟':[120.74,31.64],
    '东莞':[113.75,23.04],
    '河源':[114.68,23.73],
    '淮安':[119.15,33.5],
    '泰州':[119.9,32.49],
    '南宁':[108.33,22.84],
    '营口':[122.18,40.65],
    '惠州':[114.4,23.09],
    '江阴':[120.26,31.91],
    '蓬莱':[120.75,37.8],
    '韶关':[113.62,24.84],
    '嘉峪关':[98.289152,39.77313],
    '广州':[113.23,23.16],
    '延安':[109.47,36.6],
    '太原':[112.53,37.87],
    '清远':[113.01,23.7],
    '中山':[113.38,22.52],
    '昆明':[102.73,25.04],
    '寿光':[118.73,36.86],
    '盘锦':[122.070714,41.119997],
    '长治':[113.08,36.18],
    '深圳':[114.07,22.62],
    '珠海':[113.52,22.3],
    '宿迁':[118.3,33.96],
    '咸阳':[108.72,34.36],
    '铜川':[109.11,35.09],
    '平度':[119.97,36.77],
    '佛山':[113.11,23.05],
    '海口':[110.35,20.02],
    '江门':[113.06,22.61],
    '章丘':[117.53,36.72],
    '肇庆':[112.44,23.05],
    '大连':[121.62,38.92],
    '临汾':[111.5,36.08],
    '吴江':[120.63,31.16],
    '石嘴山':[106.39,39.04],
    '沈阳':[123.38,41.8],
    '苏州':[120.62,31.32],
    '茂名':[110.88,21.68],
    '嘉兴':[120.76,30.77],
    '长春':[125.35,43.88],
    '胶州':[120.03336,36.264622],
    '银川':[106.27,38.47],
    '张家港':[120.555821,31.875428],
    '三门峡':[111.19,34.76],
    '锦州':[121.15,41.13],
    '南昌':[115.89,28.68],
    '柳州':[109.4,24.33],
    '三亚':[109.511909,18.252847],
    '自贡':[104.778442,29.33903],
    '吉林':[126.57,43.87],
    '阳江':[111.95,21.85],
    '泸州':[105.39,28.91],
    '西宁':[101.74,36.56],
    '宜宾':[104.56,29.77],
    '呼和浩特':[111.65,40.82],
    '成都':[104.06,30.67],
    '大同':[113.3,40.12],
    '镇江':[119.44,32.2],
    '桂林':[110.28,25.29],
    '张家界':[110.479191,29.117096],
    '宜兴':[119.82,31.36],
    '北海':[109.12,21.49],
    '西安':[108.95,34.27],
    '金坛':[119.56,31.74],
    '东营':[118.49,37.46],
    '牡丹江':[129.58,44.6],
    '遵义':[106.9,27.7],
    '绍兴':[120.58,30.01],
    '扬州':[119.42,32.39],
    '常州':[119.95,31.79],
    '潍坊':[119.1,36.62],
    '重庆':[106.54,29.59],
    '台州':[121.420757,28.656386],
    '南京':[118.78,32.04],
    '滨州':[118.03,37.36],
    '贵阳':[106.71,26.57],
    '无锡':[120.29,31.59],
    '本溪':[123.73,41.3],
    '克拉玛依':[84.77,45.59],
    '渭南':[109.5,34.52],
    '马鞍山':[118.48,31.56],
    '宝鸡':[107.15,34.38],
    '焦作':[113.21,35.24],
    '句容':[119.16,31.95],
    '北京':[116.46,39.92],
    '徐州':[117.2,34.26],
    '衡水':[115.72,37.72],
    '包头':[110,40.58],
    '绵阳':[104.73,31.48],
    '乌鲁木齐':[87.68,43.77],
    '枣庄':[117.57,34.86],
    '杭州':[120.19,30.26],
    '淄博':[118.05,36.78],
    '鞍山':[122.85,41.12],
    '溧阳':[119.48,31.43],
    '库尔勒':[86.06,41.68],
    '安阳':[114.35,36.1],
    '开封':[114.35,34.79],
    '济南':[117,36.65],
    '德阳':[104.37,31.13],
    '温州':[120.65,28.01],
    '九江':[115.97,29.71],
    '邯郸':[114.47,36.6],
    '临安':[119.72,30.23],
    '兰州':[103.73,36.03],
    '沧州':[116.83,38.33],
    '临沂':[118.35,35.05],
    '南充':[106.110698,30.837793],
    '天津':[117.2,39.13],
    '富阳':[119.95,30.07],
    '泰安':[117.13,36.18],
    '诸暨':[120.23,29.71],
    '郑州':[113.65,34.76],
    '哈尔滨':[126.63,45.75],
    '聊城':[115.97,36.45],
    '芜湖':[118.38,31.33],
    '唐山':[118.02,39.63],
    '平顶山':[113.29,33.75],
    '邢台':[114.48,37.05],
    '德州':[116.29,37.45],
    '济宁':[116.59,35.38],
    '荆州':[112.239741,30.335165],
    '宜昌':[111.3,30.7],
    '义乌':[120.06,29.32],
    '丽水':[119.92,28.45],
    '洛阳':[112.44,34.7],
    '秦皇岛':[119.57,39.95],
    '株洲':[113.16,27.83],
    '石家庄':[114.48,38.03],
    '莱芜':[117.67,36.19],
    '常德':[111.69,29.05],
    '保定':[115.48,38.85],
    '湘潭':[112.91,27.87],
    '金华':[119.64,29.12],
    '岳阳':[113.09,29.37],
    '长沙':[113,28.21],
    '衢州':[118.88,28.97],
    '廊坊':[116.7,39.53],
    '菏泽':[115.480656,35.23375],
    '合肥':[117.27,31.86],
    '武汉':[114.31,30.52],
    '大庆':[125.03,46.58]
};
var convertData = function (data) {
    var res = [];
    for (var i = 0; i < data.length; i++) {
        var geoCoord = geoCoordMap[data[i].name];
        if (geoCoord) {
            res.push({
                name: data[i].name,
                value: geoCoord.concat(data[i].value)
            });
        }
    }
    return res;
};

option = {
   // backgroundColor: '#404a59',
    tooltip : {
        trigger: 'item',
		formatter: function (params) {
              if(typeof(params.value)[2] == "undefined"){
              	return params.name + ' : ' + params.value;
              }else{
              	return params.name + ' : ' + params.value[2];
              }
            }
    },
  
    geo: {
        map: 'china',
        label: {
            emphasis: {
                show: false
            }
        },
        roam: false,//禁止其放大缩小
        itemStyle: {
            normal: {
                areaColor: '#4c60ff',
                borderColor: '#002097'
            },
            emphasis: {
                areaColor: '#293fff'
            }
        }
    },
    series : [
        {
            name: '岗位数量',
            type: 'scatter',
            coordinateSystem: 'geo',
            data: convertData(data),
            symbolSize: function (val) {
                return val[2] / 30;
            },
            label: {
                normal: {
                    formatter: '{b}',
                    position: 'right',
                    show: false
                },
                emphasis: {
                    show: true
                }
            },
            itemStyle: {
                normal: {
                    color: '#ffeb7b'
                }
            }
        }
    ]
};
		
        myChart.setOption(option);
        window.addEventListener("resize",function(){
            myChart.resize();
        });
    }

})

"""